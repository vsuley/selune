services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: selune-postgres-prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - selune-network

  # Backend API Server (Production)
  server:
    build:
      context: .
      dockerfile: server/Dockerfile
      target: production
    container_name: selune-server-prod
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - selune-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Client (Production)
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: production
    container_name: selune-client-prod
    ports:
      - "80:80"
    restart: always
    depends_on:
      - server
    networks:
      - selune-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local

networks:
  selune-network:
    driver: bridge
